pico-8 cartridge // http://www.pico-8.com
version 42
__lua__


	-- objs is all objects
	-- bodies are objs w/ collision
local objs,ents,bodies,

	-- funcs that run every frame
	-- timers with new_timer are loops
loops,

	-- logs for debug
logs,
	-- queue for obj deletion
del_que,
	-- id counter for giving each obj a unique id
id_cnt
=
{},{},{},

{},
{},
{},
0

	-- make layers
for i=1,8 do
	add(objs,{})
end


	-- utilities by ms. mouse
local function compose(a, b)
	return function(...)return a(b(...))end
end

local function bind_front(f,v)
	return function(...)
		return f(v, ...)
	end
end


	-- add log
local function log(l,i)
	logs[i or 1]=l or "false"
end


	-- create loop that runs every frame
local function new_loop(func)
	return add(loops,func)
end
	-- new layer loop, useful for drawing, just a token optimization
function new_l_loop(func,l,x,y)
	return new_obj({
		_,
		func,
	},l,x,y)
end

	-- delete obj
local function del_obj(o)
	add(del_que,o).del=true
	return o
end



	-- delete loop
local del_loop
=
bind_front(del,loops)



	-- new timer, if loop is true it will repeat
local function new_timer(am,func,loop)
	am=am&-1
	local org_am,timer=am
	
	timer=function()
		if am==0do
			am=org_am
			func()
			if(not loop)del_loop(timer)
		else
			am-=1
		end
	end
	
	return new_loop(timer)
end


	-- token optimization
function set_meta(o)
	return setmetatable(o,{__index=_ENV})
end
	-- create new object
function new_obj(no,l,x,y)
	local o=set_meta{
		loops={},objs={},
		init=no[1],upd=no[2],
		l=l,id=id_cnt
	}
	
	
	id_cnt+=.001
	
	
	o.new_loop,o.del_loop,o.new_timer,
	o.new_l_loop,o.del_obj
	
	=
	function(func)
		return add(o.loops,new_loop(function()func(o)end))
	end,
	
 compose(bind_front(del,o.loops),del_loop),
 compose(bind_front(add,o.loops),new_timer),
 compose(bind_front(add,o.objs),new_l_loop),
 compose(bind_front(del,o.objs),del_obj)
	

	if(x)o.x,o.y=x,y
	if(o.init)o:init()
	
	return add(objs[o.l],o)
end
-->8
-- buildings

next_building = 0 --x-coordinate
buildings = {}
--list of map segments that are copy-pasted to make buildings
building_templates = { --{inclusive map boundaries: {mapx1, mapy1, mapx2, mapy2}, {...template indices feasibly generated after this one (self-referential indexes)}}
	{{4,4,6,7}, {3,5,6,7,9,10,11,12,13,14,15}}, --mid wide (1)
	{{8,2,9,7}, {1,3,4,5,6,7,8,9,10,11,12,13,14,15,16}}, --tall skinny (2)
	{{11,5,18,7}, {1,6,7,9,11,14}}, -- low wide (market) (3)
	{{21,1,27,7}, {1,3,5,6,7,9,10,11,12,13,14}}, -- tall wide (aaa!) (4)
	{{28,2,29,7}, {1,2,3,6,7,8,9,10,11,12,13,14,15,16}}, --mid skinny (5)
	{{31,5,32,7}, {1,3,7,9,11,12,14}}, --low skinny (6)
	{{34,4,35,7}, {1,3,5,6,9,10,11,12,13,14}}, --a-little-taller-than-low skinny (7)
	{{37,1,45,7}, {1,3,6,7,9,11,12,14}}, --tall then low (factory) (8)
	{{48,2,53,7}, {1,3,4,5,6,7,8,10,11,12,13,14,15,16}}, --idk at this point (9)
	{{55,1,58,7}, {1,2,3,5,6,7,9,10,11,12,13,14,15,16}}, --mid-height mid-wide (10)
	{{60,5,63,7}, {1,3,6,7,9,11,14}}, --low wide horizontal girder (11)
	{{65,4,69,7}, {1,3,5,6,7,9,10,11,12,13,14}}, --mid wide horizontal girder (12)
	{{71,3,73,7}, {1,2,3,5,6,7,9,10,11,12,13,14,15,16}}, --mid skinny horizontal girder (13)
	{{75,6,76,7}, {3,6,11}}, --low skinny hori girder (14)
	{{78,0,82,7}, {1,2,3,5,6,7,9,10,11,12,13,14,16}}, --double girder mid (15)
	{{84,1,88,7}, {1,2,3,4,5,6,7,8,9,10,11,12,13,14,15}} --the T (16)
}
--make inclusive
for t in all(building_templates) do
	t[1][4] += 1
	t[1][3] += 1
end

function add_random_building()
	local possibilities = buildings[#buildings].template[2]
	new_building(rnd(possibilities))
end

function new_building(template_index) --tacks a new building on to the list of buildings
	next_building += 8 --margin
	local temp = building_templates[template_index]
	add(buildings, new_obj({
		function(_ENV)
			template_id = template_index --todo potential issue with env
			template = building_templates[template_index]
		end,
		function(_ENV)
			map(template[1][1], template[1][2], x, template[1][2]*8, template[1][3]-template[1][1], template[1][4]-template[1][2])
		end
	}, 2, next_building, 0))
	next_building += ((temp[1][3] - temp[1][1]) * 8)
end

function delete_building() --deletes the building at index 1
	buildings[1]:del_obj()
	deli(buildings, 1)
end


new_obj({ --builder (invisible)
		function(_ENV)
			--populate buildings initially
			new_building(1)
			for i=1,6 do
				add_random_building()
			end
		end,
		
		
		function(_ENV)
			if next_building - player.x < 200 then
				delete_building()
				add_random_building()
			end
		end
	},
		-- layer
	5,
		-- position,
	64,64
)
-->8
--player
player = new_obj({
	function(_ENV) end,
	function(_ENV)
		spr(64, x, y)
		x += 1
	end
}, 4, 8, 60)

-->8
	-- game loop, faster than _update()
palt(0, false)
palt(1, true)
poke(0x5f2c, 3) --low rez mode
::_:: -- game loop begin
cls(1)

	-- easy input vars
‚¨ÖÔ∏è,‚û°Ô∏è,‚¨ÜÔ∏è,‚¨áÔ∏è,üÖæÔ∏è,‚ùé
=
btn(0),btn(1),btn(2),btn(3),btn(4),btn(5)



	-- update all object layers
for a=1,8 do
	for _,o in inext,objs[a]do
		o:upd()
	end
end


for _,l in inext,loops do
	l()
end


	-- obj deletion queue
for _,o in inext,del_que do
	del(objs[o.l],o)
	
	del(ents,
		del(targs,
			del(bodies,o)
		)
	)
	
	foreach(o.objs,o.del_obj)
	foreach(o.loops,o.del_loop)

	del(del_que,o)
end

-- adjust camera
camx = player.x + 30
camy = 0
camera(camx, camy)

	-- print logs
for i,l in inext,logs do
	?l,camx,10*(i-1)+camy,8
end

flip()goto _
__gfx__
00000000111111111000000000000001000000001111111111111111111111111111111111111111111111111111111111111111222222222222222211111111
00000000111111111000000000000001000000001000000000000001000000001000000000000001100000000000000100000000200000000000000200000001
0070070011111111100000aa0aa00001000aa0001000000055555501555555551000550000055001100005500000550100005500200000000000000200005001
0007700011111111100000aa0aa00001000aa0001005000000000501500000001005005000500501100000500000050100000500200000000000000205550501
00077000111111111000000000000001000000001000500055505501550555551000500505005001100500550050055100500550200002200220000200505001
00700700111111111000000000000001000000001005000000555501555005551005000050000501105500000550000105500000200000200020000200505001
0000000011111111100000aa0aa00001000aa0001000500000000501500000001000500050005001100050000005000100050000200000200020000200500501
0000000011111111100000aa0aa00001000aa0001005000055555501555555551005000050000501150000005000000150000000200000000000000200055001
11111111111111111111111111111111111111111111111111111111111111111111111111111111111111110000000111111111111111111111111110000000
00000000000000000000000000000000000000000000000000000001111661111122222222222222000000010000000100000000111115511551111110000000
06666660006666000666660006006000066666600666600000666601111661111211222121212121000000010000000100000000111155115511111110000000
66666660066006000600060006066000060000000666660006600601111661111212111212121212000000010000000100000000111551155111111110000000
66066060060006000600060006660000066666000066000006000601111661111222222121221221000000010000000100000000115555555511111110000000
66066060066666000666600006660000060000000066000006666601111111111211121212121212000000010000000100000000111151151111111110000000
66066060066666000660660006066000066666600066000006666601111661111222212121212121000000010000000100000000111151151111111110000000
66066060060006000660660006006000066666600066000006000601111661111122222222222222111111110000000100000000111151151111111110000000
11111111000000001111111111111111111111111111111110000001111111111111111111111111111555555555511151511111000000000000000000000000
11111111000000000000000000000001100000000000000010000001222222111111111111111111111555111111511155111111000000000000000000000000
111111110000000000000000000000011000000000000000100aa001122211211111111111111111155511555555511151151111000000000000000000000000
1111111100000000aa00aa00aa00aa0110aa00aa00aa00aa100aa001211121211111111111111111111511111111555551511111000000000000000000000000
1111111100000000aa00aa00aa00aa0110aa00aa00aa00aa10000001122222211111111111111111111555111111511155511111000000000000000000000000
11111111000000000000000000000001100000000000000010000001212111211111111111111111115511111155511151111111000000000000000000000000
111111110000000000000000000000011000000000000000100aa001121222211111111111111111111511111111511155511111000000000000000000000000
111111110000000011111111111111111111111111111111100aa001222222111111111111111111111511111111511151111111000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00c00c00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00c00c00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
c00000cc000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
cc000cc0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0ccccc00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
__gff__
0000010101010101010101010101010101010101010101000101010101000000000001010101010100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
__map__
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002020202020000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000511111617202000000000000000000008092020202020202000000000000000000020202c200000000000000000000000000000000000000020202020200020201d1e20000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000008090000000000000000000000020404032020201d1e000000000000000203202020202020200000201d1e20050f00202a2b20000000000000000000000000000000000000001827202020002425152223000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000002030000000000000000000000020404032a2b20080900000000000000020320202020202020000020050f20020300051c0706000000000000000000000000181927000000002020201827000000260000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000050706000203000000000000000000000002040404040403020300000000050f00020320202a2b20202000000521212121030002040403000000000000181919192700202020000000002020202020000000260000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000020403000203000a1011121314150b000002040404040403020300050f0002030002041011131407070600000204040404030002040403001819192700202020202000202020000000002020202020000000260000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000002040300020300020404040404040300000204040404040302030002030002030002040404212104041b00000204040404030002040403002020202000202020202000202020001827002020202020000000260000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000020403000203000221210d0e212103000002040404040403020300020300020300020421210d0e21211b00000204040404030002040403002020202000202020202000202020002020002020202020000000260000000000000000000000000000000000000000000000000000000000000000000000000000000000
